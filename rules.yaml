values:

  - name: topics
    expression: 'items | filter(.Name == "metadata") | map(.Response.Topics) | first() | count(true)'

  - name: partitions
    expression: 'items | filter(.Name == "metadata") | map(.Response.Topics) | first() | toPairs() | map(len(#[1].Partitions)) | sum()'

outputs:

  - message: 'Total topics: %v'
    snippets: [ 'topics' ]

  - message: 'Total partitions: %v'
    snippets: [ 'partitions' ]

  - message: 'Average partitions per topic: %v'
    snippets: [ 'partitions / topics' ]

rules:

  - id: 1
    message: 'Cluster has %v brokers (which is less than the recommended minimum of 3)'
    description: 'A production cluster requires a minimum of 3 brokers to ensure data resiliency via raft.'
    snippets: ['items | filter(.Name == "metadata") | map(.Response.Brokers)  | first() | count(true)']
    category: 'general'
    severity: 'info'
    expression: items | filter(.Name == "metadata") | map(.Response.Brokers)  | first() | count(true) < 3
    suppresses: [2, 3]

  - id: 2
    message: 'Cluster has no rack awareness'
    description: >
      Rack awareness provides a performance benefit for consumers that configure follower fetching. It also ensures data
      resiliency by
    category: 'metadata'
    severity: 'warning'
    expression: items | filter(.Name == "metadata") | map(.Response.Brokers) | first() | map(.Rack) | all(# == nil)
    suppresses: [3]

  - id: 3
    message: 'Cluster has less than three unique racks'
    category: 'metadata'
    severity: 'warning'
    expression: >
      (items | filter(.Name == "metadata") | map(.Response.Brokers) | first() | map(.Rack) | filter (# != nil) | sort() | uniq() | count(true) < 3)

  # Topic Metadata

  - id: 4
    message: '%v topics with more than 10 partitions: %v'
    snippets: ['items | filter(.Name == "metadata") | map(.Response.Topics) | first() | toPairs() | filter(len(#[1].Partitions) > 10) | count(true)',
      'items | filter(.Name == "metadata") | map(.Response.Topics) | first() | toPairs() | filter(len(#[1].Partitions) > 10) | map(string(#[0]) + ":" + string(len(#[1].Partitions))) | toJSON()']
    category: topics
    severity: info
    expression: true
    allow-long-message: true

loop:
  - names: ['topic', 'config']
    expression: 'items | filter(.Name == "topic_configs") | map(.Response) | first() | map([.Name, .Configs]) | fromPairs()'

    rules:

      - message: "Topic %v has non default configs: %v"
        expression: 'config | filter(.Source != "DEFAULT_CONFIG") | count(true) > 0'
        category: 'test'
        severity: 'info'
        snippets: ['topic', 'config | filter(.Source != "DEFAULT_CONFIG") | map(.Key + "=" + .Value)']

      - message: "Topic %v has redpanda.remote.delete set to false."
        expression: 'config | filter(.Key == "redpanda.remote.delete" && .Value == "false") | count(true) > 0'
        category: 'test'
        severity: 'info'
        snippets: [ 'topic' ]

      - message: "Topic %v has retention.bytes set to -1 and retention.local.target.ms set to 1800000."
        expression: >
          (config | one(.Key == "retention.bytes" && .Value == "-1")) &&
          (config | one(.Key == "retention.local.target.ms" && .Value == "1800000"))
        category: 'test'
        severity: 'info'
        snippets: [ 'topic' ]




